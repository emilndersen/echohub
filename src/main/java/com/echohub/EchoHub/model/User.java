// File: User.java
// Description: This file defines the User entity for the EchoHub application, including its fields,
// relationships, and lifecycle methods for managing timestamps.



package com.echohub.EchoHub.model;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity // Data transfer object
@Table(name = "users")  // Table name in the database
// This class represents a user in the system, with fields for username, password, email,
// status, creation and update timestamps, and relationships to roles and comments.
@Getter // Lombok annotation to generate getters for all fields
@Setter // Lombok annotation to generate setters for all fields
@NoArgsConstructor // Lombok annotation to generate a no-args constructor
@AllArgsConstructor // Lombok annotation to generate a constructor with all fields
@Builder    // Lombok annotation to generate a builder for this class
public class User {
    
    @Id // Primary key for the User entity
    // This field is automatically generated by the database
    @Column(name = "id", nullable = false, updatable = false)
    // The ID field is the primary key for the User entity, and it is auto-generated.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id; // Unique identifier for the user

    // The username field is unique and cannot be null.
    @Column(nullable = false, unique = true)
    private String username; // Unique username for the user

    // The password field is required and cannot be null.
    @Column(nullable = false)
    private String password; // Password for the user, stored securely

    // The email field is required, must be unique, and cannot be null.
    @Column(nullable = false, unique = true)
    private String email; // Email address for the user, must be unique

    // The status field indicates the user's account status (e.g., active, inactive).
    @Enumerated(EnumType.STRING) // Use string representation for the enum
    @Column(nullable = false)
    private Status status; // Account status of the user

    // Timestamps for creation and last update of the user record
    // The createdAt field is set automatically when the user is created.
    // The updatedAt field is updated automatically whenever the user record is modified.
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt; // Timestamp for when the user was created

    // The updatedAt field is set automatically when the user is created and updated.
    @Column(name = "updated_at")
    private LocalDateTime updatedAt; // Timestamp for when the user was last updated

    // Relationships to other entities
    // The roles field represents the many-to-many relationship between users and roles.
    // The comments field represents the one-to-many relationship between users and comments.
    // Both fields are lazily loaded and cascade all operations, with orphan removal enabled.
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @Builder.Default
    // The roles field is a set of UserRole entities associated with this user.
    // It is initialized to an empty set by default.
    private Set<UserRole> roles = new HashSet<>();

    // The comments field is a set of Comment entities associated with this user.
    // It is initialized to an empty set by default.
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @Builder.Default
    private Set<Comment> comments = new HashSet<>() ;
    
    public User(String username, String password, String email, Status status) {
        this.username = username;
        this.password = password;
        this.email = email;
        this.status = status;
    }

    // Lifecycle methods to automatically set timestamps for creation and updates
    // These methods are called by the JPA provider before persisting or updating the entity.
    @PrePersist
    // This method is called before the entity is persisted to the database.
    // It sets the createdAt and updatedAt fields to the current time.
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }
    // This method is called before the entity is updated in the database.
    // It updates the updatedAt field to the current time.
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}